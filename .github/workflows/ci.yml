name: CI

on:
  push:
  pull_request:
  schedule:
    # Weekly, at 5:30 AM on Sunday (somewhat randomly chosen).
    - cron: '30 5 * * 0'
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-20.04
    name: Linting
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Run clang-format
        run: ./cmake/tools/clang-format.py --clang-format clang-format-10

  build:
    strategy:
      matrix:
        # MinGW builds are done on Linux, since it's more up-to-date there, and
        # it's much faster.
        os: [ubuntu-20.04, windows-2016, windows-2019]
        platform: [x64, x86]
        configuration: [Debug, RelWithDebInfo]
        include:
          - {os: windows-2016, toolset: msvc}
          - {os: windows-2019, toolset: msvc}
          - {os: ubuntu-20.04, toolset: mingw}
    runs-on: '${{ matrix.os }}'
    name: 'Build: ${{ matrix.os }} / ${{ matrix.toolset }} / ${{ matrix.platform }} / ${{ matrix.configuration }}'
    env:
      TOOLSET: '${{ matrix.toolset }}'
      PLATFORM: '${{ matrix.platform }}'
      CONFIGURATION: '${{ matrix.configuration }}'
      BOOST_VERSION: 1.65.0
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Set up MinGW
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: '${{ matrix.platform }}'
        if: matrix.toolset == 'mingw'
      - name: Build Boost
        run: |
          cd cmake
          python -m project.ci.boost -- --with-filesystem --with-program_options --with-test
      - name: Build
        run: |
          cd cmake
          python -m project.ci.cmake --install
      - name: Upload binaries
        uses: actions/upload-artifact@v2
        with:
          name: 'pdb-repo-${{ matrix.os }}-${{ matrix.toolset }}-${{ matrix.platform }}-${{ matrix.configuration }}'
          path: '${{ runner.workspace }}/build/install/'
      - name: Run unit tests
        run: ../build/install/bin/test/unit_tests --log_level=all
        if: runner.os == 'Windows'
      - name: Run enum_symbols tests
        run: ../build/install/bin/enum_symbols --pdb ../build/install/bin/test/test_lib.pdb --mask 'test_ns:*'
        if: runner.os == 'Windows'
      - name: Check enum_symbols output
        run: |
          $(../build/install/bin/enum_symbols --pdb ../build/install/bin/test/test_lib.pdb | Select-String -Pattern 'test_ns::baz' -SimpleMatch -Quiet) -or $(throw 'test_ns::baz not enumerated among the symbols')
          $(../build/install/bin/enum_symbols --pdb ../build/install/bin/test/test_lib.pdb | Select-String -Pattern 'test_ns::bar' -SimpleMatch -Quiet) -or $(throw 'test_ns::bar not enumerated among the symbols')
          $(../build/install/bin/enum_symbols --pdb ../build/install/bin/test/test_lib.pdb | Select-String -Pattern 'test_ns::foo' -SimpleMatch -Quiet) -or $(throw 'test_ns::foo not enumerated among the symbols')
          $(../build/install/bin/enum_symbols --pdb ../build/install/bin/test/test_lib.pdb | Select-String -Pattern 'test_ns::var' -SimpleMatch -Quiet) -or $(throw 'test_ns::var not enumerated among the symbols')
        if: runner.os == 'Windows'
      - name: Run call_stack
        run: ../build/install/bin/test/call_stack
        if: runner.os == 'Windows'
      - name: Check call_stack output
        run: |
          $(../build/install/bin/test/call_stack | Select-String -Pattern '[test_lib!test_ns::baz' -SimpleMatch -Quiet) -or $(throw 'test_ns::baz not found in the call stack')
          $(../build/install/bin/test/call_stack | Select-String -Pattern '[test_lib!test_ns::bar' -SimpleMatch -Quiet) -or $(throw 'test_ns::bar not found in the call stack')
          $(../build/install/bin/test/call_stack | Select-String -Pattern '[test_lib!test_ns::foo' -SimpleMatch -Quiet) -or $(throw 'test_ns::foo not found in the call stack')
        if: runner.os == 'Windows'
